<?php

/**
 * @file
 * Module allowing Open Question to submit questions to this Vopros.
 */

/**
 * Implements hook_menu().
 */
function bv_openquestion_menu() {
  $items = array();

  // QandA migrate page.
  $items['admin/vopros/config/client/migrate'] = array(
    'title' => 'QandA migrate',
    'description' => 'Migrate QandA to clients.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bv_openquestion_client_migrate_form'),
    'access arguments' => array('administer questions'),
    'file' => 'bv_openquestion.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['vopros/question/create/service'] = array(
    'page callback' => 'bv_openquestion_create_service',
    'access arguments' => array('create question via web service'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bv_openquestion_permission() {
  $permissions = array(
    'create question via web service' => array(
      'title' => t('Create question via web service'),
    ),
  );

  return $permissions;
}

/**
 * Page callback to create questions.
 *
 * Used by Open Question to create questions
 */
function bv_openquestion_create_service() {
  $question = vopros_question_new();
  $question_wrapper = entity_metadata_wrapper('vopros_question', $question);
  $post_data = array();
  // Reformat all the post data to not use CamelCase.
  foreach ($_POST as $key => $value) {
    $post_data[strtolower(preg_replace('/(?<=\\w)(?=[A-Z])/', "_$1", $key))] = $value;
  }
  $properties = $question_wrapper->getPropertyInfo();

  // Populate the question with the needed info.
  foreach (array_keys($properties) as $property) {
    if (isset($post_data[$property])) {
      $question->{$property} = $post_data[$property];
    }
  }
  if (!empty($_POST['questionAttachmentData'])) {
    $file = file_save_data(base64_decode($_POST['questionAttachmentData']));
    if ($file) {
      $file_data = array(
        'fid' => $file->fid,
        'display' => 1,
        'description' => '',
      );
      $question_wrapper->vopros_question_attachment[0] = $file_data;
    }
  }

  // Map qanda and agency to client and channel.
  $mappings = _bv_openquestion_qanda_mapping();
  $full_key = $question->qanda_service_name . '|' . $question->agency;
  // Fall back to mapping with empty agency.
  $qanda_key = $question->qanda_service_name . '|';
  if (($mapping = $mappings[$full_key]) || ($mapping = $mappings[$qanda_key])) {
    if ($mapping['client']) {
      $client = vopros_question_client_load_by_agency($mapping['client']);
      $question->client_id = $client->client_id;
    }
    if ($mapping['channel']) {
      $question->channel = $mapping['channel'];
    }
  }

  if (module_exists('vopros_editorial') && !empty($_POST['vopros_editorial'])) {
    unset($question->vopros_editorial);
    $vocab = taxonomy_vocabulary_machine_name_load('vopros_editorial');
    $terms = taxonomy_term_load_multiple(FALSE, array('name' => $_POST['vopros_editorial'], 'vid' => $vocab->vid));
    if ($terms) {
      $term = array_shift($terms);
      $question_wrapper->vopros_editorial = $term;
    }
  }

  // We can't have an empty answer preference.
  if (empty($question->user_answer_preference)) {
    $question->user_answer_preference = 'mail';
  }

  if (!empty($post_data)) {
    $validation = vopros_question_validate_data($question);
    if ($validation['status'] == 'valid') {
      $question_wrapper->save();
      print 'Question created';
      return;
    }
    drupal_add_http_header('Status', '400');
    $errors = array();
    foreach ($validation['errors'] as $value) {
      $errors[] = $value[0];
    }
    $message = 'Could not create vopros question, invalid data for: %fields. Validation object: %validation, POST data: %post';
    $args = array(
      '%fields' => implode(', ', $errors),
      '%validation' => print_r($validation, TRUE),
      '%post' => print_r($_POST, TRUE),
    );
    watchdog('vopros_question', $message, $args, WATCHDOG_ERROR);
  }
  print 'Question not created';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bv_openquestion_form_vopros_question_client_settings_form_alter(&$form, &$form_state) {
  $mapping = _bv_openquestion_qanda_mapping();

  // Check the db to see if there's any unmapped services, and add them in.
  $questions = db_select('vopros_question', 'vq')
             ->fields('vq', array('qanda_service_name', 'agency_id'))
             ->groupBy('qanda_service_name')
             ->groupBy('agency_id')
             ->orderBy('qanda_service_name')
             ->orderBy('agency_id');
  $count_field = $questions->addExpression('COUNT(question_id)', 'count');
  $migrated_field = $questions->addExpression("(client_id <> 0 AND channel <> '')", 'migrated');
  $questions->groupBy($migrated_field);

  foreach ($questions->execute() as $row) {
    $key = $row->qanda_service_name . '|' . $row->agency_id;
    if (!isset($mapping[$key])) {
      $mapping[$key] = array('client' => '', 'channel' => '');
    }
    $mapping[$key] += array(
      'unmigrated' => 0,
      'migrated' => 0,
    );
    $field = 'unmigrated';
    if ($row->{$migrated_field}) {
      $field = 'migrated';
    }
    $mapping[$key][$field] = $row->{$count_field};
  }

  // Revert to textual representation.
  $mapping_string = '';
  foreach ($mapping as $key => $val) {
    $mapping_string .= $key . ' -> ' . $val['client'] . '|' . $val['channel'] . ' # ' . $val['unmigrated'] . '/' . $val['migrated'] . "\n";
  }

  $form['bv_openquestion_qanda_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('QandA mapping'),
    '#rows' => 30,
    '#default_value' => $mapping_string,
    '#description' => t('Mapping of QandA sevice names to clients in the form of <em>qanda|agency_id -> client|channel</em>. Everything after a # is ignored, and are populated with the number of pending/migrated questions.'),
  );

  $channels = vopros_question_channels();
  $channel_list = '<dl>';
  foreach ($channels as $name => $channel) {
    $channel_list .= '<dt>' . check_plain($channel['name']) . '</dt><dd>' .
                  $name . '</dd>';
  }
  $channel_list .= '</dl>';
  $form['vopros_question_channels'] = array(
    '#type' => 'item',
    '#title' => t('Known channels'),
    '#markup' => $channel_list,
  );

  $form['#validate'][] = 'bv_openquestion_client_settings_validate';
}

/**
 * Validation handler for vopros_question_client_settings_form().
 *
 * Checks that the configured clients and channels exists.
 */
function bv_openquestion_client_settings_validate(&$form, &$form_state) {
  $mapping = preg_replace('/\s+#[^\n]*$/m', '', $form_state['values']['bv_openquestion_qanda_mapping']);
  // Allow for empty submission. It's the way to clear the mapping and build it
  // up again.
  if (empty($mapping)) {
    return;
  }

  $clients = array();
  foreach (vopros_question_client_load_multiple() as $client) {
    $clients[$client->agency] = $client;
  }
  $channels = vopros_question_channels();

  $parsed = _bv_openquestion_parse_qanda_mapping($mapping);
  if (!$parsed) {
    form_error($form['bv_openquestion_qanda_mapping'], t('Error parsing mapping.'));
  }
  foreach ($parsed as $to) {
    if (!empty($to['client']) && !isset($clients[$to['client']])) {
      form_error($form['bv_openquestion_qanda_mapping'], t('Unknown client @client.', array('@client' => $to['client'])));
    }
    if (!empty($to['channel']) && !isset($channels[$to['channel']])) {
      form_error($form['bv_openquestion_qanda_mapping'], t('Unknown channel @channel.', array('@channel' => $to['channel'])));
    }
  }

  // Set the value to the comment-stripped version.
  form_set_value($form['bv_openquestion_qanda_mapping'], $mapping, $form_state);
}

/**
 * Get QandA service mapping.
 *
 * Returns the mapping of old QandA service names and agency_id to the new
 * client and channel system.
 *
 * @return array
 *   The mapping in form of 'qanda_service_name|agency_id' => array(). Each
 *   value array has a client and channel key.
 */
function _bv_openquestion_qanda_mapping() {
  $mapping = &drupal_static(__FUNCTION__, NULL);
  if (is_null($mapping)) {
    $mapping = _bv_openquestion_parse_qanda_mapping(variable_get(
                 'bv_openquestion_qanda_mapping', ''));
  }

  return $mapping;
}

/**
 * Parses QandA service mapping spec.
 *
 * @param string $mapping_string
 *   The textual representation.
 * @param bool $strict
 *   Whether to fail on unparsable lines.
 *
 * @return array
 *   The mapping in form of 'qanda_service_name|agency_id' => array(). Each
 *   value array has a client and channel key.
 */
function _bv_openquestion_parse_qanda_mapping($mapping_string, $strict = FALSE) {
  $mapping = array();
  foreach (explode("\n", $mapping_string) as $line) {
    $parts = explode('->', $line);
    if (count($parts) == 2) {
      $tmp = explode('|', trim($parts[1]));
      $client = array(
        'client' => $tmp[0],
        'channel' => isset($tmp[1]) ? $tmp[1] : '',
      );
      $mapping[trim($parts[0])] = $client;
    }
    else {
      if (trim($line) && $strict) {
        return FALSE;
      }
    }
  }
  return $mapping;
}
